// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class DnDApp {
    constructor() {
        this.db = database;
        this.currentTab = 'characters';
        this.init();
    }

    async init() {
        try {
            await this.db.init();
            console.log('Database initialized');
            
            this.initTabs();
            this.initDice();
            this.initCharacterManager();
            this.initServiceWorker();
            
        } catch (error) {
            console.error('Failed to initialize app:', error);
        }
    }

    initServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => console.log('SW registered'))
                .catch(error => console.log('SW registration failed'));
        }
    }

    initTabs() {
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    switchTab(tabName) {
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });

        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.toggle('active', pane.id === tabName);
        });

        this.currentTab = tabName;

        switch(tabName) {
            case 'characters':
                this.characterManager.loadCharacters();
                break;
            case 'spells':
                this.loadSpells();
                break;
            case 'combat':
                this.loadCombat();
                break;
        }
    }

    initDice() {
        document.querySelectorAll('.dice').forEach(button => {
            button.addEventListener('click', (e) => {
                const sides = parseInt(e.target.dataset.sides);
                this.rollDice(sides);
            });
        });
    }

    rollDice(sides) {
        const result = Math.floor(Math.random() * sides) + 1;
        const resultElement = document.getElementById('dice-result');
        
        resultElement.innerHTML = `
            <div class="result">
                <span class="dice-roll">d${sides}:</span>
                <span class="result-number">${result}</span>
            </div>
        `;

        resultElement.style.transform = 'scale(1.1)';
        setTimeout(() => {
            resultElement.style.transform = 'scale(1)';
        }, 200);
    }

    initCharacterManager() {
        this.characterManager = new CharacterManager(this.db);
        document.getElementById('add-character').addEventListener('click', () => {
            this.characterManager.showCharacterForm();
        });
    }

    async loadSpells() {
        try {
            const spells = await this.db.getSpells();
            this.renderSpells(spells);
        } catch (error) {
            console.error('Error loading spells:', error);
        }
    }

    renderSpells(spells) {
        const spellsList = document.getElementById('spells-list');
        
        if (spells.length === 0) {
            spellsList.innerHTML = '<p>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.</p>';
            return;
        }

        spellsList.innerHTML = spells.map(spell => `
            <div class="spell-card">
                <h3>${spell.name}</h3>
                <p>–£—Ä–æ–≤–µ–Ω—å: ${spell.level} | –®–∫–æ–ª–∞: ${spell.school}</p>
                <p>${spell.description}</p>
            </div>
        `).join('');
    }

    async loadCombat() {
        console.log('Loading combat...');
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω
class CharacterManager {
    constructor(db) {
        this.db = db;
        this.characters = [];
        this.avatarFile = null;
    }

    async loadCharacters() {
        try {
            this.characters = await this.db.getCharacters();
            this.renderCharacters();
        } catch (error) {
            console.error('Error loading characters:', error);
        }
    }

    renderCharacters() {
        const charactersList = document.getElementById('characters-list');
        
        if (this.characters.length === 0) {
            charactersList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üé≠</div>
                    <h3>–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!</p>
                </div>
            `;
            return;
        }

        charactersList.innerHTML = this.characters.map(character => {
            const hpPercent = (character.combat.currentHP / character.combat.maxHP) * 100;
            const hpColor = hpPercent > 70 ? '#4CAF50' : hpPercent > 30 ? '#FF9800' : '#F44336';
            
            return `
                <div class="character-card" data-id="${character.id}">
                    <div class="character-avatar">
                        ${character.avatar ? 
                            `<img src="${character.avatar}" alt="${character.name}" />` : 
                            '<div class="avatar-placeholder">üéÆ</div>'
                        }
                    </div>
                    
                    <div class="character-info">
                        <div class="character-header">
                            <h3 class="character-name">${character.name}</h3>
                            <span class="character-level">–£—Ä. ${character.level}</span>
                        </div>
                        
                        <div class="character-details">
                            <div class="detail-item">
                                <span class="detail-label">–†–∞—Å–∞:</span>
                                <span class="detail-value">${character.race}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">–ü–æ–ª:</span>
                                <span class="detail-value">${character.gender || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                            </div>
                        </div>
                        
                        <div class="hp-bar">
                            <div class="hp-info">
                                <span class="hp-current">${character.combat.currentHP}</span>
                                <span class="hp-separator">/</span>
                                <span class="hp-max">${character.combat.maxHP}</span>
                                <span class="hp-text">HP</span>
                            </div>
                            <div class="hp-track">
                                <div class="hp-fill" style="width: ${hpPercent}%; background: ${hpColor}"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="character-actions">
                        <button class="btn-action btn-edit" onclick="app.characterManager.editCharacter(${character.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn-action btn-delete" onclick="app.characterManager.deleteCharacter(${character.id})" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    async showCharacterForm(characterId = null) {
        const character = characterId ? await this.db.get('characters', characterId) : null;
        
        const formHtml = `
            <div class="modal-overlay" id="character-modal">
                <div class="modal">
                    <div class="modal-header">
                        <h3>${character ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}</h3>
                        <button class="btn-close" onclick="app.characterManager.closeForm()">√ó</button>
                    </div>
                    
                    <form id="character-form" class="character-form">
                        <input type="hidden" id="character-id" value="${character?.id || ''}">
                        
                        <!-- –ë–ª–æ–∫ –∞–≤–∞—Ç–∞—Ä–∞ -->
                        <div class="form-section">
                            <label class="section-label">–í–Ω–µ—à–Ω–æ—Å—Ç—å</label>
                            <div class="avatar-upload">
                                <div class="avatar-preview" id="avatar-preview">
                                    ${character?.avatar ? 
                                        `<img src="${character.avatar}" alt="Preview" />` : 
                                        '<div class="avatar-placeholder">üéÆ</div>'
                                    }
                                </div>
                                <div class="avatar-controls">
                                    <input type="file" id="avatar-input" accept="image/*" style="display: none;">
                                    <button type="button" class="btn-secondary" onclick="document.getElementById('avatar-input').click()">
                                        üì∑ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    </button>
                                    ${character?.avatar ? `
                                        <button type="button" class="btn-danger" onclick="app.characterManager.removeAvatar()">
                                            ‚ùå –£–¥–∞–ª–∏—Ç—å
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                        
                        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                        <div class="form-section">
                            <label class="section-label">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="character-name">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ *</label>
                                    <input type="text" id="character-name" value="${character?.name || ''}" required 
                                           placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞">
                                </div>
                                
                                <div class="form-group">
                                    <label for="character-race">–†–∞—Å–∞ *</label>
                                    <select id="character-race" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É</option>
                                        <option value="–ß–µ–ª–æ–≤–µ–∫" ${character?.race === '–ß–µ–ª–æ–≤–µ–∫' ? 'selected' : ''}>–ß–µ–ª–æ–≤–µ–∫</option>
                                        <option value="–≠–ª—å—Ñ" ${character?.race === '–≠–ª—å—Ñ' ? 'selected' : ''}>–≠–ª—å—Ñ</option>
                                        <option value="–î–≤–∞—Ä—Ñ" ${character?.race === '–î–≤–∞—Ä—Ñ' ? 'selected' : ''}>–î–≤–∞—Ä—Ñ</option>
                                        <option value="–•–∞–ª—Ñ–ª–∏–Ω–≥" ${character?.race === '–•–∞–ª—Ñ–ª–∏–Ω–≥' ? 'selected' : ''}>–•–∞–ª—Ñ–ª–∏–Ω–≥</option>
                                        <option value="–ì–Ω–æ–º" ${character?.race === '–ì–Ω–æ–º' ? 'selected' : ''}>–ì–Ω–æ–º</option>
                                        <option value="–ü–æ–ª—É–æ—Ä–∫" ${character?.race === '–ü–æ–ª—É–æ—Ä–∫' ? 'selected' : ''}>–ü–æ–ª—É–æ—Ä–∫</option>
                                        <option value="–¢–∏—Ñ–ª–∏–Ω–≥" ${character?.race === '–¢–∏—Ñ–ª–∏–Ω–≥' ? 'selected' : ''}>–¢–∏—Ñ–ª–∏–Ω–≥</option>
                                        <option value="–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π" ${character?.race === '–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π' ? 'selected' : ''}>–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="character-gender">–ü–æ–ª</label>
                                    <select id="character-gender">
                                        <option value="">–ù–µ —É–∫–∞–∑–∞–Ω</option>
                                        <option value="–ú—É–∂—Å–∫–æ–π" ${character?.gender === '–ú—É–∂—Å–∫–æ–π' ? 'selected' : ''}>–ú—É–∂—Å–∫–æ–π</option>
                                        <option value="–ñ–µ–Ω—Å–∫–∏–π" ${character?.gender === '–ñ–µ–Ω—Å–∫–∏–π' ? 'selected' : ''}>–ñ–µ–Ω—Å–∫–∏–π</option>
                                        <option value="–î—Ä—É–≥–æ–π" ${character?.gender === '–î—Ä—É–≥–æ–π' ? 'selected' : ''}>–î—Ä—É–≥–æ–π</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="character-level">–£—Ä–æ–≤–µ–Ω—å *</label>
                                    <input type="number" id="character-level" value="${character?.level || 1}" 
                                           min="1" max="20" required>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ó–¥–æ—Ä–æ–≤—å–µ -->
                        <div class="form-section">
                            <label class="section-label">–ó–¥–æ—Ä–æ–≤—å–µ</label>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="character-max-hp">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP *</label>
                                    <input type="number" id="character-max-hp" 
                                           value="${character?.combat?.maxHP || 10}" min="1" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="character-current-hp">–¢–µ–∫—É—â–µ–µ HP *</label>
                                    <input type="number" id="character-current-hp" 
                                           value="${character?.combat?.currentHP || 10}" min="0" required>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ -->
                        <div class="form-section">
                            <label class="section-label">–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</label>
                            <div class="abilities-grid">
                                ${this.renderAbilityInput('strength', 'üí™ –°–∏–ª–∞', character)}
                                ${this.renderAbilityInput('dexterity', 'üéØ –õ–æ–≤–∫–æ—Å—Ç—å', character)}
                                ${this.renderAbilityInput('constitution', '‚ù§Ô∏è –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', character)}
                                ${this.renderAbilityInput('intelligence', 'üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', character)}
                                ${this.renderAbilityInput('wisdom', 'üëÅÔ∏è –ú—É–¥—Ä–æ—Å—Ç—å', character)}
                                ${this.renderAbilityInput('charisma', 'üí´ –•–∞—Ä–∏–∑–º–∞', character)}
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn-secondary" onclick="app.characterManager.closeForm()">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" class="btn-primary">
                                ${character ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', formHtml);
        this.setupFormHandlers(character);
    }

    renderAbilityInput(ability, label, character) {
        const value = character?.abilities?.[ability] || 10;
        return `
            <div class="ability-input">
                <label for="ability-${ability}">${label}</label>
                <input type="number" id="ability-${ability}" 
                       value="${value}" min="1" max="30" 
                       class="ability-score">
                <div class="ability-modifier">
                    –ú–æ–¥: ${Math.floor((value - 10) / 2)}
                </div>
            </div>
        `;
    }

    setupFormHandlers(character) {
        const form = document.getElementById('character-form');
        const avatarInput = document.getElementById('avatar-input');
        const avatarPreview = document.getElementById('avatar-preview');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
        avatarInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                if (file.size > 2 * 1024 * 1024) { // 2MB limit
                    alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2MB');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    avatarPreview.innerHTML = `<img src="${e.target.result}" alt="Preview" />`;
                    this.avatarFile = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCharacter();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        document.querySelectorAll('.ability-score').forEach(input => {
            input.addEventListener('input', (e) => {
                const value = parseInt(e.target.value) || 10;
                const modifier = Math.floor((value - 10) / 2);
                e.target.parentElement.querySelector('.ability-modifier').textContent = 
                    `–ú–æ–¥: ${modifier >= 0 ? '+' + modifier : modifier}`;
            });
        });
    }

    removeAvatar() {
        const avatarPreview = document.getElementById('avatar-preview');
        avatarPreview.innerHTML = '<div class="avatar-placeholder">üéÆ</div>';
        this.avatarFile = null;
        document.getElementById('avatar-input').value = '';
    }

    async saveCharacter() {
        const form = document.getElementById('character-form');
        const characterId = document.getElementById('character-id').value;
        
        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        const characterData = {
            name: document.getElementById('character-name').value,
            race: document.getElementById('character-race').value,
            gender: document.getElementById('character-gender').value,
            level: parseInt(document.getElementById('character-level').value),
            avatar: this.avatarFile,
            abilities: {
                strength: parseInt(document.getElementById('ability-strength').value),
                dexterity: parseInt(document.getElementById('ability-dexterity').value),
                constitution: parseInt(document.getElementById('ability-constitution').value),
                intelligence: parseInt(document.getElementById('ability-intelligence').value),
                wisdom: parseInt(document.getElementById('ability-wisdom').value),
                charisma: parseInt(document.getElementById('ability-charisma').value)
            },
            combat: {
                maxHP: parseInt(document.getElementById('character-max-hp').value),
                currentHP: parseInt(document.getElementById('character-current-hp').value),
                armorClass: 10 + Math.floor((parseInt(document.getElementById('ability-dexterity').value) - 10) / 2)
            },
            updatedAt: new Date()
        };

        try {
            if (characterId) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                const existingCharacter = await this.db.get('characters', parseInt(characterId));
                const updatedCharacter = { 
                    ...existingCharacter, 
                    ...characterData,
                    id: parseInt(characterId) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
                if (!this.avatarFile && existingCharacter.avatar) {
                    updatedCharacter.avatar = existingCharacter.avatar;
                }
                
                await this.db.updateCharacter(updatedCharacter);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                await this.db.addCharacter(characterData);
            }

            this.closeForm();
            await this.loadCharacters();
            
        } catch (error) {
            console.error('Error saving character:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ' + error.message);
        }
    }

    async editCharacter(characterId) {
        await this.showCharacterForm(characterId);
    }

    async deleteCharacter(characterId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            try {
                await this.db.deleteCharacter(characterId);
                await this.loadCharacters();
            } catch (error) {
                console.error('Error deleting character:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
            }
        }
    }

    closeForm() {
        const modal = document.getElementById('character-modal');
        if (modal) {
            modal.remove();
        }
        this.avatarFile = null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new DnDApp();
});
