// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ DnD 5e
class AdvancedCharacter {
    constructor(data) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        this.id = data.id;
        this.name = data.name || '';
        this.race = data.race || '';
        this.raceId = data.raceId || '';
        this.class = data.class || '';
        this.classId = data.classId || '';
        this.subclass = data.subclass || '';
        this.subclassId = data.subclassId || '';
        this.level = data.level || 1;
        this.background = data.background || '';
        this.backgroundId = data.backgroundId || '';
        this.alignment = data.alignment || '';
        this.experience = data.experience || 0;
        this.gender = data.gender || '';
        this.age = data.age || '';
        this.height = data.height || '';
        this.weight = data.weight || '';
        this.appearance = data.appearance || '';
        this.personality = data.personality || '';
        this.ideals = data.ideals || '';
        this.bonds = data.bonds || '';
        this.flaws = data.flaws || '';
        this.avatar = data.avatar || null;
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        this.abilities = data.abilities || {
            strength: 10,
            dexterity: 10,
            constitution: 10,
            intelligence: 10,
            wisdom: 10,
            charisma: 10
        };
        
        // –ë–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.combat = data.combat || {
            maxHP: 10,
            currentHP: 10,
            temporaryHP: 0,
            armorClass: 10,
            initiative: 0,
            speed: 30,
            hitDice: '1d8',
            deathSaves: {
                successes: 0,
                failures: 0
            }
        };
        
        // –ù–∞–≤—ã–∫–∏
        this.skills = data.skills || this.initializeSkills();
        
        // –°–ø–∞—Å–±—Ä–æ—Å–∫–∏
        this.savingThrows = data.savingThrows || this.initializeSavingThrows();
        
        // –í–ª–∞–¥–µ–Ω–∏—è
        this.proficiencies = data.proficiencies || {
            armor: [],
            weapons: [],
            tools: [],
            languages: []
        };
        
        // –ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        this.passiveSkills = data.passiveSkills || this.calculatePassiveSkills();
        
        // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        this.features = data.features || [];
        
        // –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        this.equipment = data.equipment || [];
        
        // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        this.spells = data.spells || [];
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        this.source = data.source || 'local';
        this.userId = data.userId || null;
        this.cloudId = data.cloudId || null;
        this.createdAt = data.createdAt || new Date();
        this.updatedAt = data.updatedAt || new Date();
    }
    
    initializeSkills() {
        return {
            acrobatics: { proficient: false, expertise: false },
            animalHandling: { proficient: false, expertise: false },
            arcana: { proficient: false, expertise: false },
            athletics: { proficient: false, expertise: false },
            deception: { proficient: false, expertise: false },
            history: { proficient: false, expertise: false },
            insight: { proficient: false, expertise: false },
            intimidation: { proficient: false, expertise: false },
            investigation: { proficient: false, expertise: false },
            medicine: { proficient: false, expertise: false },
            nature: { proficient: false, expertise: false },
            perception: { proficient: false, expertise: false },
            performance: { proficient: false, expertise: false },
            persuasion: { proficient: false, expertise: false },
            religion: { proficient: false, expertise: false },
            sleightOfHand: { proficient: false, expertise: false },
            stealth: { proficient: false, expertise: false },
            survival: { proficient: false, expertise: false }
        };
    }
    
    initializeSavingThrows() {
        return {
            strength: { proficient: false },
            dexterity: { proficient: false },
            constitution: { proficient: false },
            intelligence: { proficient: false },
            wisdom: { proficient: false },
            charisma: { proficient: false }
        };
    }
    
    calculatePassiveSkills() {
        const proficiencyBonus = this.getProficiencyBonus();
        return {
            perception: 10 + this.getAbilityModifier('wisdom') + 
                       (this.skills.perception.proficient ? proficiencyBonus : 0) +
                       (this.skills.perception.expertise ? proficiencyBonus : 0),
            investigation: 10 + this.getAbilityModifier('intelligence') + 
                          (this.skills.investigation.proficient ? proficiencyBonus : 0) +
                          (this.skills.investigation.expertise ? proficiencyBonus : 0),
            insight: 10 + this.getAbilityModifier('wisdom') + 
                     (this.skills.insight.proficient ? proficiencyBonus : 0) +
                     (this.skills.insight.expertise ? proficiencyBonus : 0)
        };
    }
    
    getAbilityModifier(ability) {
        const score = this.abilities[ability];
        return Math.floor((score - 10) / 2);
    }
    
    getProficiencyBonus() {
        return Math.floor((this.level - 1) / 4) + 2;
    }
    
    getSkillModifier(skill) {
        const skillData = this.skills[skill];
        const ability = this.getSkillAbility(skill);
        const abilityModifier = this.getAbilityModifier(ability);
        const proficiencyBonus = this.getProficiencyBonus();
        
        let modifier = abilityModifier;
        if (skillData.proficient) modifier += proficiencyBonus;
        if (skillData.expertise) modifier += proficiencyBonus;
        
        return modifier;
    }
    
    getSkillAbility(skill) {
        const skillAbilities = {
            strength: ['athletics'],
            dexterity: ['acrobatics', 'sleightOfHand', 'stealth'],
            intelligence: ['arcana', 'history', 'investigation', 'nature', 'religion'],
            wisdom: ['animalHandling', 'insight', 'medicine', 'perception', 'survival'],
            charisma: ['deception', 'intimidation', 'performance', 'persuasion']
        };
        
        for (const [ability, skills] of Object.entries(skillAbilities)) {
            if (skills.includes(skill)) return ability;
        }
        return 'intelligence'; // fallback
    }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è DnD 5e
const ALIGNMENTS = [
    '–ó–∞–∫–æ–Ω–Ω–æ-–¥–æ–±—Ä—ã–π', '–ó–∞–∫–æ–Ω–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', '–ó–∞–∫–æ–Ω–Ω–æ-–∑–ª–æ–π',
    '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä—ã–π', '–ò—Å—Ç–∏–Ω–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–∑–ª–æ–π',
    '–•–∞–æ—Ç–∏—á–Ω–æ-–¥–æ–±—Ä—ã–π', '–•–∞–æ—Ç–∏—á–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', '–•–∞–æ—Ç–∏—á–Ω–æ-–∑–ª–æ–π'
];

const ABILITY_NAMES = {
    strength: 'üí™ –°–∏–ª–∞',
    dexterity: 'üéØ –õ–æ–≤–∫–æ—Å—Ç—å', 
    constitution: '‚ù§Ô∏è –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
    intelligence: 'üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    wisdom: 'üëÅÔ∏è –ú—É–¥—Ä–æ—Å—Ç—å',
    charisma: 'üí´ –•–∞—Ä–∏–∑–º–∞'
};

const SKILL_NAMES = {
    acrobatics: '–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞',
    animalHandling: '–£—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏',
    arcana: '–ú–∞–≥–∏—è',
    athletics: '–ê—Ç–ª–µ—Ç–∏–∫–∞',
    deception: '–û–±–º–∞–Ω',
    history: '–ò—Å—Ç–æ—Ä–∏—è',
    insight: '–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    intimidation: '–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ',
    investigation: '–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
    medicine: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
    nature: '–ü—Ä–∏—Ä–æ–¥–∞',
    perception: '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    performance: '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
    persuasion: '–£–±–µ–∂–¥–µ–Ω–∏–µ',
    religion: '–†–µ–ª–∏–≥–∏—è',
    sleightOfHand: '–õ–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫',
    stealth: '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å',
    survival: '–í—ã–∂–∏–≤–∞–Ω–∏–µ'
};